# yaml-language-server: $schema=./values.schema.json

## @section Ingress configuration
## @param host The hostname of the OpenTelemetry Collector
host: otelcol-github-actions.elastic.dev

## @param ip.whitelist The IP whitelist for the Ingress
ip:
  whitelist:
  # GitHub hooks IP ranges https://api.github.com/meta
  - "192.30.252.0/22"
  - "185.199.108.0/22"
  - "140.82.112.0/20"
  - "143.55.64.0/20"
  - "2a0a:a440::/29"
  - "2606:50c0::/32"
  - "3.127.168.255" # Public IP VPN Aviatrix EU Central 1
  - "3.216.183.90"  # Public IP VPN Aviatrix US East 1
  - "54.202.94.5"   # Public IP VPN Aviatrix US West 2
  - "3.24.111.141"  # Public IP VPN Aviatrix APAC Southeast 2 (Sydney)
  - "52.76.115.233" # Public IP VPN Aviatrix APAC Southeast 1 (Singapore)
  - "3.34.61.163"   # Public IP VPN Aviatrix APAC Northeast 2
  - "18.167.79.116" # Public IP VPN Aviatrix APAC East 1

## @section Secret configuration
## @param secret.githubAppName The Google Secret name with the GitHub app credentials
## @param secret.backstage The Google Secret name with the backstage credentials
secret:
  githubAppName: observability-ci_github-app
  backstage: observability-ci_backstage

## @section Image configuration
## @param image.repository The image repository to pull from
## @param image.tag The image tag to pull
## @param image.pullPolicy The image pull policy
image:
  repository: reakaleek/otelcol-githubactions@sha256
  tag: e6580a59ededb99655bd4d021776e7bf215c65cca7916069ba069d92bb16837c
  pullPolicy: IfNotPresent

## @section Replica count configuration
## @param replicaCount The number of replicas to run
## Should not be more than 1 if prometheus receiver is enabled.
## See https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/prometheusreceiver/README.md#%EF%B8%8F-warning
replicaCount: 1

## @section Resources configuration
## @param resources The resources to allocate to the container
resources:
  requests:
    memory: "8Gi"
    cpu: "2500m"

## @section Extra environment variables
## @param extraEnv[0].name The name of the environment variable
## @param extraEnv[0].value The value of the environment variable
extraEnv:
  - name: GOMEMLIMIT
    value: "6GiB" # Approx 80% of the container memory limit. Recommended by the memory_limiter processor

## @section Service account configuration
## @param serviceAccount.annotations Annotations for the service account
serviceAccount:
  annotations: {}

## @section OpenTelemetry Collector onfiguration
## @param collector.config [object] The configuration for the OpenTelemetry Collector
collector:
  config:
    extensions:
      zpages:
        endpoint: "0.0.0.0:55679"
      pprof:
        endpoint: "0.0.0.0:1777"

    receivers:
      githubactions:
        path: /events # The path needs to match GitHub App's webhook path
        secret: "${env:WEBHOOK_SECRET}"
      githubactionslog:
        batch_size: 10000
        path: /events # The path needs to match GitHub App's webhook path
        webhook_secret: "${env:WEBHOOK_SECRET}"
        github_auth:
          app_id: "${env:GITHUB_APP_ID}"
          installation_id: "${env:GITHUB_INSTALLATION_ID}"
          private_key: "${env:GITHUB_APP_PRIVATE_KEY}"
      githubactionsannotations:
        batch_size: 10000
        path: /events # The path needs to match GitHub App's webhook path
        webhook_secret: "${env:WEBHOOK_SECRET}"
        github_auth:
          installation_id: "${env:GITHUB_INSTALLATION_ID}"
          app_id: "${env:GITHUB_APP_ID}"
          private_key: "${env:GITHUB_APP_PRIVATE_KEY}"
      prometheus/self:
        config:
          scrape_configs:
            - job_name: 'otelcol'
              scrape_interval: 10s
              static_configs:
                - targets: [ '0.0.0.0:8888' ]
              metric_relabel_configs:
                - source_labels: [ __name__ ]
                  regex: '.*grpc_io.*'
                  action: drop

    processors:
      memory_limiter:
        check_interval: 1s
        limit_percentage: 65
        spike_limit_percentage: 20
      batch/apm-logs:
        # apm server cannot handle a larger batch size for logs
        send_batch_size: 2000
        send_batch_max_size: 2000
        timeout: 0s
      batch:
        send_batch_max_size: 10000
        timeout: 0s
      backstageprocessor:
        token: "${env:BACKSTAGE_TOKEN}"
        endpoint: "${env:BACKSTAGE_ENDPOINT}"

    exporters:
      otlp/apm:
        endpoint: "${env:APM_URL}"
        headers:
          Authorization: "Bearer ${env:APM_TOKEN}"
        sending_queue:
          enabled: false
      debug:
        verbosity: basic

    service:
      extensions: [zpages, pprof]
      telemetry:
        metrics:
          address: ":8888"
        logs:
          encoding: json
          level: INFO
      pipelines:
        traces:
          receivers:
            - githubactions
          processors:
            - memory_limiter
            - batch
            - backstageprocessor
          exporters:
            - otlp/apm
        logs:
          receivers:
            - githubactionslog
            - githubactionsannotations
          processors:
            - memory_limiter
            - batch/apm-logs
            - backstageprocessor
          exporters:
            - otlp/apm
        metrics:
          receivers:
            - prometheus/self
          processors:
            - memory_limiter
          exporters:
            - otlp/apm

## @skip reloader Reloader configuration
reloader:
  reloader:
    watchGlobally: false
